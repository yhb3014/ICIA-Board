--삭제
DROP TABLE MEMBER CASCADE CONSTRAINTS;
DROP SYNONYM M;
DROP VIEW BLIST;
DROP VIEW BLIST_1;
DROP VIEW MINFO;
DROP VIEW RLIST;
--
DROP TABLE GRADE CASCADE CONSTRAINTS;
DROP SYNONYM G;
--
DROP TABLE BOARD CASCADE CONSTRAINTS;
DROP SYNONYM B;
DROP SEQUENCE BOARD_SEQ;
--
DROP TABLE BOARDFILE CASCADE CONSTRAINTS;
DROP SYNONYM BF;
DROP SEQUENCE BF_SEQ;
--
DROP TABLE REPLY CASCADE CONSTRAINTS;
DROP SYNONYM R;
DROP SEQUENCE REPLY_SEQ;

--회원테이블
--자식테이블 외래키 제약조건들을 삭제후 부모테이블 삭제
CREATE TABLE MEMBER(
    M_ID NVARCHAR2(20) NOT NULL,
    M_PWD NVARCHAR2(100) NOT NULL, --비번은 암호하하기 위해서
    M_NAME NVARCHAR2(10) NOT NULL,
    M_BIRTH NCHAR(8) NOT NULL, --고정 문자열이 속도가 빠름
    M_ADDR NVARCHAR2(50) NOT NULL,
    M_PHONE NVARCHAR2(13) NOT NULL,
    M_POINT NUMBER DEFAULT 0 NOT NULL
);
CREATE SYNONYM M FOR MEMBER;
--기본키
ALTER TABLE MEMBER 
ADD CONSTRAINT PK_M_ID PRIMARY KEY(M_ID);
--회원정보
--SELECT * FROM M;
INSERT INTO M(M_ID,M_PWD,M_NAME,M_BIRTH,M_ADDR,M_PHONE,M_POINT)
VALUES('PARK','1111','박종일','19901007','인천남동구','010-1111-2222',20);
INSERT INTO M(M_ID,M_PWD,M_NAME,M_BIRTH,M_ADDR,M_PHONE,M_POINT)
VALUES('TEST','1111','손님','19901231','서울 강남','010-2222-3333',DEFAULT);
COMMIT;

--회원등급
CREATE TABLE GRADE(
    G_CODE NCHAR(1) NOT NULL,
    G_NAME NVARCHAR2(10) NOT NULL,
    G_LOWPOINT NUMBER,
    G_HIGHPOINT NUMBER
);
CREATE SYNONYM G FOR GRADE;
--SELECT * FROM G;
--기본키
ALTER TABLE GRADE 
ADD CONSTRAINT PK_G_CODE PRIMARY KEY(G_CODE);
--
INSERT INTO G(G_CODE,G_NAME,G_LOWPOINT,G_HIGHPOINT)
VALUES('A','브론즈',0,10);
INSERT INTO G(G_CODE,G_NAME,G_LOWPOINT,G_HIGHPOINT)
VALUES('B','실버',11,20);
INSERT INTO G(G_CODE,G_NAME,G_LOWPOINT,G_HIGHPOINT)
VALUES('C','골드',21,30);
INSERT INTO G(G_CODE,G_NAME,G_LOWPOINT,G_HIGHPOINT)
VALUES('D','다이아',31,100);
COMMIT;
--SELECT * FROM G;

--원글 게시판
CREATE TABLE BOARD(
    B_NUM NUMBER NOT NULL, --PK
    B_TITLE NVARCHAR2(50) NOT NULL,
    B_CONTENTS NCLOB NOT NULL, --글내용을 문자 무한대
    B_ID NVARCHAR2(20) NOT NULL, --FK, 부모(M)테이블 M_ID참조
    B_DATE DATE DEFAULT SYSDATE,
    B_VIEWS NUMBER DEFAULT 0 NOT NULL
);

--기본키
ALTER TABLE BOARD 
ADD CONSTRAINT PK_B_NUM PRIMARY KEY(B_NUM);
--외래키
ALTER TABLE BOARD
ADD CONSTRAINT FK_B_ID FOREIGN KEY(B_ID)
REFERENCES MEMBER(M_ID); --ON DELETE CASCASE(회원삭제시 게시글까지 모두 삭제)
--글번호 시퀀스
CREATE SEQUENCE BOARD_SEQ; --1부터 1씩 증가
CREATE SYNONYM B FOR BOARD;
--SELECT BOARD_SEQ.NEXTVAL FROM DUAL;
--SELECT BOARD_SEQ.CURRVAL FROM DUAL;

--DUMMY DATA
--DESC B; --테이블 구조 보기
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글1','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글2','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글3','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글4','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글5','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글6','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글7','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글8','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글9','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글10','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글11','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글12','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글13','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글14','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글15','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글16','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글17','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글18','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글19','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글20','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글21','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글22','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글23','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글24','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글25','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글26','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글27','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글28','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글29','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글30','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글31','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글32','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글33','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글34','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글35','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글36','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글37','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글38','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글39','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글40','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글41','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글42','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글43','무궁화꽃이 피었습니다.','PARK',DEFAULT,DEFAULT);
INSERT INTO B 
VALUES(BOARD_SEQ.NEXTVAL,'게시글44','무궁화꽃이 피었습니다.','TEST',DEFAULT,DEFAULT);
COMMIT;
--SELECT * FROM B;

--파일 업로드 테이블 추가할 것(1:N)
CREATE TABLE BOARDFILE(
    BF_NUM NUMBER NOT NULL, --PK
    BF_BNUM NUMBER NOT NULL, --FK
    BF_ORINAME NVARCHAR2(50) NOT NULL,
    BF_SYSNAME NVARCHAR2(50) NOT NULL
);
CREATE SYNONYM BF FOR BOARDFILE;
CREATE SEQUENCE BF_SEQ;
--기본키
ALTER TABLE BOARDFILE 
ADD CONSTRAINT PK_BF_NUM PRIMARY KEY(BF_NUM);
--외래키
ALTER TABLE BOARDFILE
ADD CONSTRAINT FK_BF_BNUM FOREIGN KEY(BF_BNUM)
REFERENCES BOARD(B_NUM);

--답글 게시판
CREATE TABLE REPLY(
    R_NUM NUMBER NOT NULL, --PK
    R_BNUM NUMBER NOT NULL, --FK, 부모(B)테이블의 B_NUM을 참조
    R_CONTENTS NVARCHAR2(200) NOT NULL,
    R_ID NVARCHAR2(20) NOT NULL, --FK, 부모(M)테이블의 M_ID 참조
    R_DATE DATE DEFAULT SYSDATE NOT NULL
 );
CREATE SEQUENCE REPLY_SEQ;
CREATE SYNONYM R FOR REPLY;
 --기본키
ALTER TABLE REPLY 
ADD CONSTRAINT PK_R_NUM PRIMARY KEY(R_NUM);
--외래키
ALTER TABLE REPLY
ADD CONSTRAINT FK_R_BNUM FOREIGN KEY(R_BNUM)
REFERENCES BOARD(B_NUM) ; --ON DELETE CASCASE(트랜잭션으로 처리하기 위해 제외)

ALTER TABLE REPLY
ADD CONSTRAINT FK_R_ID FOREIGN KEY(R_ID)
REFERENCES MEMBER(M_ID);
--DUMMY DATA
INSERT INTO R VALUES(REPLY_SEQ.NEXTVAL,5,'댓글1','PARK',DEFAULT); 
INSERT INTO R VALUES(REPLY_SEQ.NEXTVAL,5,'댓글2','PARK',DEFAULT);
INSERT INTO R VALUES(REPLY_SEQ.NEXTVAL,6,'댓글1','TEST',DEFAULT); 
INSERT INTO R VALUES(REPLY_SEQ.NEXTVAL,6,'댓글2','TEST',DEFAULT);
COMMIT;
--SELECT * FROM R;

--로그인 후 출력할 회원정보 뷰
CREATE OR REPLACE VIEW MINFO AS
SELECT M.M_ID,M.M_NAME, M.M_POINT,G.G_NAME 
FROM M INNER JOIN G
ON M.M_POINT BETWEEN G.G_LOWPOINT AND G.G_HIGHPOINT;
--SELECT * FROM MINFO;

--최신글 순으로 댓글 출력 VIEW
CREATE OR REPLACE VIEW RLIST AS
SELECT R_BNUM, R_NUM, R_CONTENTS, R_DATE, R_ID
FROM R
ORDER BY R_DATE DESC;
--SELECT * FROM RLIST;

--최신글순으로 원글 출력 VIEW
CREATE OR REPLACE VIEW BLIST AS
SELECT B.B_NUM AS BNUM,    --BNUM:빈 필드명과 컬럼명이 일치하면 편하다. 
       B.B_TITLE AS BTITLE,
       B.B_CONTENTS AS BCONTENTS,
       B.B_ID AS BID,
       M.M_NAME AS MNAME,
       B.B_DATE AS BDATE,
       B.B_VIEWS AS BVIEWS 
FROM B INNER JOIN M
ON B.B_ID=M.M_ID
ORDER BY B.B_DATE DESC;
--SELECT * FROM BLIST;

CREATE OR REPLACE VIEW BLIST_1 AS
SELECT ROWNUM AS RONUM, BNUM,BTITLE,BCONTENTS,BID,MNAME,BDATE,BVIEWS
FROM BLIST;

--댓글이 하나도 없을때 최대값 구하기
--SELECT NVL(MAX(R_NUM),0) FROM RLIST;

--SELECT COUNT(*) FROM RLIST;
--만약에 개수가 0인경우 R_NUM=1 설정
--그렇지 않으면
--SELECT MAX(R_NUM) FROM RLIST;
--SELECT * FROM blist_1;






